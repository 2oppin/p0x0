{
  "name": "Triangle",
  "fields": {
    "mProgram": "*Int",
    "vPMatrixHandle": "*Int",
    "vertexBuffer": "*FloatBuffer",
    "colorBuffer": "*FloatBuffer",
    "COORDS_PER_VERTEX": "*Int=3",
    "ATTRS_PER_COLOR": "*Int=4",
    "triangleCoords": "*Float[]={0.0f,  0.622008459f, 0.0f,   -0.5f, -0.311004243f, 0.0f,  0.5f, -0.311004243f, 0.0f}",
    "color": "*Float[]={0.43671875f, 0.76953125f, 0.22265625f, 1.0f}",

    "vertexShaderCode": "*String=\"uniform mat4 uMVPMatrix;\" +\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        // the matrix must be included as a modifier of gl_Position\n        // Note that the uMVPMatrix factor *must be first* in order\n        // for the matrix multiplication product to be correct.\n        \"  gl_Position = uMVPMatrix * vPosition;\" +\n        \"}\"",

    "fragmentShaderCode": "*String=\"precision mediump float;\" +\n    \"uniform vec4 vColor;\" +\n    \"void main() {\" +\n    \"  gl_FragColor = vColor;\" +\n    \"}\"",

    "positionHandle": "*Int",
    "colorHandle": "*Int",
    "vertexCount": "*Int= triangleCoords.length / COORDS_PER_VERTEX",
    "vertexStride": "*Int= COORDS_PER_VERTEX * 4",
    "colorCount": "*Int= color.length / ATTRS_PER_COLOR",
    "colorStride": "*Int= ATTRS_PER_COLOR * 4",

    "Triangle": "None()=android/opengl/microapp/code/shapes/fnc/Triangle/constructor",
    "draw": "None(Float[])=android/opengl/microapp/code/shapes/fnc/Triangle/draw"
  },
  "dependencies": {
    "java.nio": ["FloatBuffer", "ByteOrder", "ByteBuffer"],
    "android.opengl": ["GLES20"],
    "com.oppin.microapp": ["MicroappRenderer"]
  },
  "platforms": ["java"]
}
